#include<bits/stdc++.h>
using namespace std;

class Stack
{
	int max_size;
	char *arr;
	int top;
	
	public:
		Stack(int size)
		{
			max_size=size;
			arr=new char[max_size];
			top=-1;
		}
	
	~Stack()
	{
		delete[] arr;
	}
	
	void push(char element)
	{
		if(top>=max_size-1)
		{
			cout<<"Stack is full, you cannot push element now"<<endl;
		}
		else
		{
			arr[++top]=element;
			cout<<element<<" is pushed successfully"<<endl;
		}
	}
	
	void pop()
	{
		if(top<0)
		cout<<"Stack is Empty"<<endl;
		else
		cout<<arr[top--]<<" element is removed sucessfully"<<endl;
	}
	
	char peak()
	{
	  if(top<0)
	  return '\0';
	  
	  else
	  return arr[top];
	}
	
	bool isEmpty()
	{
		return (top<0);	
	}
	
	
};

bool is_matching_pair(char open,char close)
{
	return (open=='(' && close==')')||(open=='{' && close=='}')||(open=='['&& close==']');
	
}

bool is_balanced(const string &expression)
{
	int n=expression.length();
	Stack stack(n);
	for(int i=0;i<n;i++)
	{
		char ch=expression[i];
		if(ch=='(' || ch=='{' || ch=='[')
		{
			stack.push(ch);
		}
		else if(ch==')'||ch=='}'||ch==']')
		{
			if(stack.isEmpty()|| !is_matching_pair(stack.peak(),ch))
			{
				return false;
			}
			stack.pop();
		}
	}
	return stack.isEmpty();
}

int main()
{
	string expression;
	cout<<"enter an expression"<<endl;
	getline(cin,expression);
	if(is_balanced(expression))
	{
		cout<<"The expression is balanced"<<endl;
	}
	else
	cout<<"Not balanced"<<endl;
	return 0;
}
